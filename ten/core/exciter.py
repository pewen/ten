"""
Exciter Object
"""

from __future__ import division, absolute_import, print_function
import warnings

from ..random.base import points_in_sphere
from ..random.generator import random_walk


class Exciter(object):
    """
    Exitador class
    """

    def __init__(self, way, np_radio, r_electro=0):
        """
        Generate an exiton.

        Can be created at any place of the nanoparticle with uniformal
        distribution like by a laser or by chemical electrolysis.

        Parametes
        ---------
        way : str
            Way to generate the exiton. Can be 'laser' or 'electro'.
        np_radio : float
            Radio of nanoparticle in nm.
        r_electro : float, optional
            Radio of electrolisis in nm.


        Raises
        ------
        ValueError
            if way is diferent of 'laser' or 'electro'.

        Warning
            if use 'electro' but don't give r_electro,


        Examples
        --------

        >>> exiton = Exciter('laser', 15)
        >>> exiton.way
        'laser'

        >>> exiton.r_electro
        0

        >>> exiton.np_radio
        15

        >>> Exciter('las', 15)
        Traceback (most recent call last):
            ...
        ValueError: way must be 'laser' or 'electro'

        >>> Exciter('electro', 15)
        Traceback (most recent call last):
            ...
        Warning: way = electro but r_electro is not give

        """
        posible_way = ['laser', 'electro']
        if way not in posible_way:
            raise ValueError("way must be 'laser' or 'electro'")

        if way == 'electro' and r_electro == 0:
            # raise RuntimeWarning()
            menssage = "way = electro but r_electro is not give"
            warnings.warn(menssage, RuntimeWarning)

        self.way = way
        self.r_electro = r_electro
        self.np_radio = np_radio
        self.position = []

        if self.way == posible_way[0]:
            self.laser_generated()
        elif self.way == posible_way[1]:
            self.electro_generated()

    def laser_generated(self):
        """
        Generate the random position of the exciton in any
        part of the nanoparticle, pretending that this is
        bombarded by a laser. Because the diameter of the
        nanoparticle is too small, it is assumed that all
        are bombarded with the same intensity.

        Examples
        --------

        >>> ten.random.set_seed(8)
        >>> exiton = Exciter('laser', 15)
        >>> exiton.laser_generated()
        >>> print(exiton.position)
        [ 3.48097515, -0.26103414,  6.16735347]

        """
        point = points_in_sphere(1, self.np_radio)
        self.position = point[0]

    def electro_generated(self):
        """
        The random position is generated by a chemical electrolysis.
        This position is generated between the radius R of the
        nanoparticle and a radius r, where r depends electrolysis.

        Examples
        --------

        >>> ten.random.set_seed(8)
        >>> exiton = Exciter('laser', 15, 13)
        >>> exiton.electro_generated()
        >>> print(exiton.position)
        [  6.84969176,  -0.51365015,  12.13581494]

        """
        point = points_in_sphere(1, self.np_radio,
                                 self.r_electro)
        self.position = point[0]

    def walk(self, epsilon):
        """
        Exciton make a random walk inside the nanoparticle.
        The size of the walk is fixed (epsilon).

        Parameters
        ----------
        epsilon : float
            Size of walk in nm.

        Examples
        --------

        >>> np_radio = 15
        >>> exiton = Exciter('laser', np_radio)
        >>> for i in range(4000):
        ...     exiton.walk(2)
        >>> np.sqrt(sum(exiton.position**2)) < np_radio
        True

        """

        random_walk(self.position, self.np_radio, epsilon)
